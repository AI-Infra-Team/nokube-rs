# GitOps Controller Configuration (YAML)
#
# This file is consumed by the GitOps Controller container.
# Mount it as a ConfigMap into the pod and set env GITOPS_CONFIG=/etc/gitops/gitops-config.yaml
#
# Minimal fields:
# - github_configs: map of repositories to watch (key -> repo config)
# - services[]: list of services that map to repo paths containing Kubernetes YAMLs
# - poll_interval: polling interval (seconds)

github_configs:
  # Use a key to identify a repo; services reference it via `github: <key>`
  core-repo:
    repo_owner: your-org              # required, e.g. "kubernetes"
    repo_name: your-repo              # required, e.g. "examples"
    branch: main                      # optional, default: main
    token: ghp_your_token_here        # optional for public repos; required for private repos

  # other-repo:
  #   repo_owner: another-org
  #   repo_name: another-repo
  #   branch: release-1.0
  #   token: ghp_another_token

services:
  # Controller scans k8s_yaml_dir recursively for *.yaml/*.yml and applies them
  - name: example-app                  # logical service name
    github: core-repo                  # reference to github_configs key
    k8s_yaml_dir: deploy/k8s          # path inside repo containing Kubernetes YAMLs

  # - name: backend
  #   github: other-repo
  #   k8s_yaml_dir: services/backend/k8s

# Polling cadence in seconds
poll_interval: 60

# Optional: configure NoKube Applyer (preferred path for applying YAML)
# The controller will use `nokube apply --cluster <cluster_name>` and pass YAML via stdin.
applyer_nokube:
  cluster_name: "your-cluster"                       # target cluster name
  nokube_download_url: "https://releases.example.com/nokube/linux-amd64/nokube"
